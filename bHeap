# Binary Heap interactivepython


class BinHeap():
    """ p//2 = parent; 2p = lChild; 2p+1 = rChild """
    """ For max and min """
    
    def __init__(self):
        self.hList = [0]
        self.cSize = 0

    def pUp(self,i):
        while i // 2 > 0:
            if self.hList[i] < self.hList[i // 2]:
                temp = self.hList[i // 2]
                self.hList[i // 2] = self.hList[i]
                self.hList[i] = temp
            i = i // 2
                
    def insert(self,k):
        self.hList.append(k)
        self.cSize = self.cSize + 1
        self.pUp(self.cSize)

    def pDown(self,i):
        while (i*2) <= self.cSize:
            mc = self.mChild(i)
            if self.hList[i] > self.hList[mc]:
                temp = self.hList[i]
                self.hList[i] = self.hList[mc]
                self.hList[mc] = temp

            i = mc

    def mChild(self,i):
        if i * 2 + 1 > self.cSize:
            return i * 2
        else:
            if self.hList[i*2] < self.hList[i*2+1]:
                return i * 2
            else:
                return i * 2 + 1

    def dMin(self):
        retVal = self.hList[1]
        self.hList[1] = self.hList[self.cSize]
        self.cSize = self.cSize - 1
        self.hList.pop()
        self.pDown(1)
        return retVal

    def bHeap(self,aList):
        i = len(aList) // 2
        self.cSize = len(aList)
        self.hList = [0] + aList[:]
        while (i>0):
            self.pDown(i)
            i = i - 1

    















    

            
